basePath: /
definitions:
  dto.CreatePostDTO:
    properties:
      content:
        type: string
      id:
        type: integer
      imageURL:
        type: string
    required:
    - content
    - id
    type: object
  dto.FollowDTO:
    properties:
      followedID:
        type: integer
      followerID:
        type: integer
    required:
    - followedID
    - followerID
    type: object
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.RegisterDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.UpdatePostDTO:
    properties:
      content:
        type: string
      id:
        type: integer
      imageURL:
        type: string
    required:
    - content
    - id
    type: object
  models.Follow:
    properties:
      followedID:
        type: integer
      followerID:
        type: integer
      id:
        type: integer
    type: object
  models.Post:
    properties:
      content:
        type: string
      imageURL:
        type: string
      postID:
        type: integer
      userID:
        type: integer
    type: object
  models.User:
    properties:
      userAvatar:
        type: string
      userEmail:
        type: string
      userID:
        type: integer
      userName:
        type: string
      userPassword:
        type: string
    type: object
host: localhost:8083
info:
  contact: {}
  description: Социальная сеть на golang
  title: CloneVK
  version: dev
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Логин (потом у этого метода будет другой функционал, но пока так)
      parameters:
      - description: Пользователь
        in: body
        name: userInfo
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Токен
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Логин пользователя
      tags:
      - users
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создать пользователя (потом у этого метода будет другой функционал,
        но пока так)
      parameters:
      - description: Пользователь
        in: body
        name: userInfo
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Регистрация пользователя
      tags:
      - users
  /feed/global:
    get:
      description: Получает глобальную ленту
      parameters:
      - description: ограничение количества постов
        in: query
        name: limit
        required: true
        type: integer
      - description: пропуск первых n постов
        in: query
        name: offset
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Follow'
            type: array
        "400":
          description: Invalid offset value
          schema:
            type: string
        "404":
          description: No posts in feed
          schema:
            type: string
        "500":
          description: Failed to get global feed
          schema:
            type: string
      summary: Получить глобальную ленту
      tags:
      - feed
  /feed/personal:
    get:
      description: Получает персональную ленту
      parameters:
      - description: id получателя ленты
        in: query
        name: userid
        required: true
        type: integer
      - description: ограничение количества постов
        in: query
        name: limit
        required: true
        type: integer
      - description: пропуск первых n постов
        in: query
        name: offset
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Follow'
            type: array
        "400":
          description: Invalid offset value
          schema:
            type: string
        "404":
          description: No posts in feed
          schema:
            type: string
        "500":
          description: Failed to get personal feed
          schema:
            type: string
      summary: Получить глобальную ленту
      tags:
      - feed
  /follow/{id}:
    get:
      description: Получает все фолловы пользователя
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Follow'
            type: array
        "400":
          description: Invalid JSON
          schema:
            type: string
        "404":
          description: Follows not found
          schema:
            type: string
        "500":
          description: Failed to get follows
          schema:
            type: string
      summary: Получить все фолловы пользователя
      tags:
      - follows
  /followers/{id}:
    get:
      description: Получает всех фолловеров пользователя
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Follow'
            type: array
        "400":
          description: Invalid JSON
          schema:
            type: string
        "404":
          description: Followers not found
          schema:
            type: string
        "500":
          description: Failed to get followers
          schema:
            type: string
      summary: Получить всех фолловеров пользователя
      tags:
      - follows
  /follows:
    delete:
      consumes:
      - application/json
      description: Удаляет фоллов
      parameters:
      - description: Фоллов
        in: body
        name: followInfo
        required: true
        schema:
          $ref: '#/definitions/dto.FollowDTO'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Validate error
          schema:
            type: string
        "500":
          description: Failed to delete follow
          schema:
            type: string
      summary: Удалить фоллов
      tags:
      - follows
    get:
      description: Получить все фолловы
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Follow'
            type: array
        "404":
          description: Follows notfound
          schema:
            type: string
        "500":
          description: Failed to get follows
          schema:
            type: string
      summary: Получить список всех фолловов
      tags:
      - follows
    post:
      consumes:
      - application/json
      description: Фолловит человека на другого
      parameters:
      - description: Фоллов
        in: body
        name: followInfo
        required: true
        schema:
          $ref: '#/definitions/dto.FollowDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Validate error
          schema:
            type: string
        "500":
          description: Failed to create follow
          schema:
            type: string
      summary: Создать фоллов
      tags:
      - follows
  /posts:
    post:
      consumes:
      - application/json
      description: Создаёт пост и добавялет его в базу данных
      parameters:
      - description: Пост
        in: body
        name: postInfo
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid JSON
          schema:
            type: string
        "500":
          description: Failed to create posts
          schema:
            type: string
      summary: Создание поста
      tags:
      - posts
  /posts/{id}:
    delete:
      description: Удаляет пост
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID
          schema:
            type: string
        "500":
          description: Failed to delete posts
          schema:
            type: string
      summary: Удаление поста
      tags:
      - posts
    get:
      description: Получает пост по идентификатору
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Failed to find posts
          schema:
            type: string
      summary: Получить пост по ID
      tags:
      - posts
  /posts/update:
    put:
      description: Обновляет пост
      parameters:
      - description: Новые данные поста
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePostDTO'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid JSON
          schema:
            type: string
        "500":
          description: Failed to update person
          schema:
            type: string
      summary: Обновление поста
      tags:
      - posts
  /posts/user:
    get:
      description: Получает информацию о всех постах пользователя по его идентификатору
      parameters:
      - description: userid
        in: query
        name: userid
        required: true
        type: integer
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: offset
        in: query
        name: offset
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "400":
          description: Invalid offset value
          schema:
            type: string
        "404":
          description: Posts not found
          schema:
            type: string
        "500":
          description: Failed to find posts
          schema:
            type: string
      summary: Получить все посты от пользователя
      tags:
      - posts
  /users:
    get:
      description: Получает информацию о всех пользователях
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Failed to get users
          schema:
            type: string
      summary: Получить всех пользователей
      tags:
      - users
  /users/{id}:
    get:
      description: Получает информацию о пользователе
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: User Not Found
          schema:
            type: string
        "500":
          description: Failed to find user
          schema:
            type: string
      summary: Получить пользователя по ID
      tags:
      - users
swagger: "2.0"
