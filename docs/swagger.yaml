basePath: /
definitions:
  dto.CreatePostDTO:
    properties:
      content:
        type: string
      id:
        type: integer
      imageURL:
        type: string
    required:
    - content
    - id
    type: object
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.RegisterDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.Post:
    properties:
      content:
        type: string
      imageURL:
        type: string
      postID:
        type: integer
      userID:
        type: integer
    type: object
  models.User:
    properties:
      userAvatar:
        type: string
      userEmail:
        type: string
      userID:
        type: integer
      userName:
        type: string
      userPassword:
        type: string
    type: object
host: localhost:8083
info:
  contact: {}
  description: Социальная сеть на golang
  title: CloneVK
  version: dev
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Логин (потом у этого метода будет другой функционал, но пока так)
      parameters:
      - description: Пользователь
        in: body
        name: userInfo
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Токен
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Логин пользователя
      tags:
      - users
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создать пользователя (потом у этого метода будет другой функционал,
        но пока так)
      parameters:
      - description: Пользователь
        in: body
        name: userInfo
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Регистрация пользователя
      tags:
      - users
  /posts:
    post:
      consumes:
      - application/json
      description: Создаёт пост и добавялет его в базу данных
      parameters:
      - description: Пост
        in: body
        name: postInfo
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Создание поста
      tags:
      - posts
  /posts/{id}:
    get:
      description: Получает пост по идентификатору
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
      summary: Получить пост по ID
      tags:
      - posts
  /posts/user/{id}:
    get:
      description: Получает информацию о всех постах пользователя по его идентификатору
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
      summary: Получить все посты от пользователя
      tags:
      - posts
  /user/{id}:
    get:
      description: Получает информацию о пользователе
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Получить пользователя по ID
      tags:
      - users
  /users:
    get:
      description: Получает информацию о всех пользователях
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Получить всех пользователей
      tags:
      - users
swagger: "2.0"
